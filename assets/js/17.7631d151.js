(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{363:function(t,e,s){"use strict";s.r(e);var v=s(9),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前端必须了解的网络协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端必须了解的网络协议"}},[t._v("#")]),t._v(" 前端必须了解的网络协议")]),t._v(" "),s("h3",{attrs:{id:"首先是一幅四层-七层模型图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首先是一幅四层-七层模型图"}},[t._v("#")]),t._v(" 首先是一幅四层/七层模型图")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("OSI七层网络模型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("TCP/IP四层概念模型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("对应网络协议")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("应用层（Application）")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("应用层")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("==HTTP==、TFTP、==FTP==、NFS、WAIS、SMTP")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("表示层（Presentation）")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Telnet、Rlogin、SNMP、Gopher")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("会话层（session）")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("==SNMP==、==DNS==")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("传输层（Transport）")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("传输层")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("TCP、UDP")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("网络层（Network）")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("网络层")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("IP、ICMP、ARP、RARP、AKP、UUCP")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("数据链路层（Data link）")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("数据链路层")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("FDDI、Ethernet、Arpanet、PDN、SLIP、PPP")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("物理层（Physical）")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("IEEE 802.1A、IEEE 802.2到IEEE 802.11")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("要想深入的了解透四层、七层模型图需要一定的时间，我们前端人员其实只要重点了解一下应用层中的HTTP、FTP，以及传输层当中的TCP和网络层中的ip部分。")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"http、websocket等协议与tcp、ip协议的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http、websocket等协议与tcp、ip协议的关系"}},[t._v("#")]),t._v(" http、websocket等协议与tcp、ip协议的关系")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190612101906366.png",alt:"在这里插入图片描述"}})]),t._v(" "),s("blockquote",[s("p",[t._v("TCP/IP是传输层协议，是互联网相关的各类协议的统称，主要解决数据如何在网络中传输；而HTTP是应用层协议，主要解决如何包装数据。\nSocket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），通过Socket，我们才能使用TCP/IP协议。\n"),s("strong",[t._v("==可以把ip层想象成公路，tcp、udp是火车，而http，https等是货物==")]),t._v("\n=="),s("strong",[t._v("http连接")]),t._v("==：http连接就是所谓的短连接，即客户端向服务端发送一次请求，服务器端响应后连接即会断掉；\n=="),s("strong",[t._v("socket连接")]),t._v("==：socket连接就是所谓的长连接，理论上客户端和服务器端一旦建立起来连接将不会主动断掉；但是由于各种环境因素可能会连接断开。比如：服务器或客户端主机down了，网络故障，或者两者之间长时间没有数据传输，网络防火墙可能会断开该连接以释放网络资源。所以当一个socket连接中没有数据的传输，那么为了维持连接需要发送心跳消息~~具体消息格式是开发者自己定义的。")])]),t._v(" "),s("hr"),t._v(" "),s("h4",{attrs:{id:"http和https的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别"}},[t._v("#")]),t._v(" http和https的区别")]),t._v(" "),s("h6",{attrs:{id:"http：是互联网上应用最广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（tcp），用于从www服务器传输超文本到本地浏览器的传输协议，它可以是浏览器更加高效，使网络传输减少。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http：是互联网上应用最广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（tcp），用于从www服务器传输超文本到本地浏览器的传输协议，它可以是浏览器更加高效，使网络传输减少。"}},[t._v("#")]),t._v(" http：是互联网上应用最广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（tcp），用于从www服务器传输超文本到本地浏览器的传输协议，它可以是浏览器更加高效，使网络传输减少。")]),t._v(" "),s("h6",{attrs:{id:"https：是以安全为目标的http通道，简单讲是http的安全办。即http下加入ssl层，https的安全基础是ssl，因此加密的详细内容就需要ssl。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https：是以安全为目标的http通道，简单讲是http的安全办。即http下加入ssl层，https的安全基础是ssl，因此加密的详细内容就需要ssl。"}},[t._v("#")]),t._v(" https：是以安全为目标的http通道，简单讲是http的安全办。即http下加入ssl层，https的安全基础是ssl，因此加密的详细内容就需要ssl。")]),t._v(" "),s("h6",{attrs:{id:"https的作用主要可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性；"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https的作用主要可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性；"}},[t._v("#")]),t._v(" https的作用主要可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性；")]),t._v(" "),s("h6",{attrs:{id:"两者的主要区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两者的主要区别"}},[t._v("#")]),t._v(" ==两者的主要区别==")]),t._v(" "),s("ol",[s("li",[t._v("https协议需要ca申请证书，一般免费证书较少，因而需要一定费用；")]),t._v(" "),s("li",[t._v("http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议;")]),t._v(" "),s("li",[t._v("http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443；")]),t._v(" "),s("li",[t._v("http的连接很简单，是无状态的；https协议是由ssl+http协议构建的可进行加密传输，身份认证的网络协议，比http协议安全。")])]),t._v(" "),s("h6",{attrs:{id:"http的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http的特点"}},[t._v("#")]),t._v(" ==http的特点==")]),t._v(" "),s("ol",[s("li",[t._v("支持客户、服务器模式（c/s模式）")]),t._v(" "),s("li",[t._v("简单快速：客户向服务器请求服务时，秩序传送请求方法和路径。请求方法常用的有GET、HEAD、POST。没中方法规定了客户与服务器联系的类型不同。由于http协议简单，是的http服务器的程序规模小，因为通信速度很快。")]),t._v(" "),s("li",[t._v("灵活：http允许传输任意类型的数据对象。正在传输的类型有content-type加以标记。")]),t._v(" "),s("li",[t._v("无连接：含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。")]),t._v(" "),s("li",[t._v("无状态：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信心时它的应答就比较快。")])]),t._v(" "),s("h6",{attrs:{id:"http工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http工作流程"}},[t._v("#")]),t._v(" ==http工作流程==")]),t._v(" "),s("ol",[s("li",[t._v("建立tcp/ip连接，客户端与服务器通过socket三次握手进行连接")]),t._v(" "),s("li",[t._v("客户端向服务端发起HTTP请求（例：POST/login.html http/1.1）")]),t._v(" "),s("li",[t._v("客户端发送一空白行，表示客户端请求完毕")]),t._v(" "),s("li",[t._v("服务器做出应答，表示对于客户端请求的应答，例如：HTTP、1.1 200 OK")]),t._v(" "),s("li",[t._v("服务器向客户端发送应答头信息")]),t._v(" "),s("li",[t._v("服务器向客户端发送应答头信息后，也会发送一空白行，表示应答头信息发送完毕，接着就以content-type要求的数据格式发送数据给客户端")]),t._v(" "),s("li",[t._v("服务端关闭tcp连接，如果服务器或者客户端增加connection：keep-alive就表示客户端与服务端继续保存连接，在下次请求时可以继续使用这次的连接")])]),t._v(" "),s("h6",{attrs:{id:"https的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https的特点"}},[t._v("#")]),t._v(" ==https的特点==")]),t._v(" "),s("p",[s("strong",[t._v("优点")])]),t._v(" "),s("ol",[s("li",[t._v("认证用户和服务器，确保数据发送到正确的客户机和服务器；")]),t._v(" "),s("li",[t._v("安全性 可防止数据在传输过程中不被窃取，改变，确保数据完整性；同事也一定程度上保护了服务端，使用恶意攻击和伪装数据的成本大大提高。")])]),t._v(" "),s("p",[s("strong",[t._v("缺点")])]),t._v(" "),s("ol",[s("li",[t._v("https握手阶段比较费时，会使页面加载时间延长50%，增加10%-20%的耗电；")]),t._v(" "),s("li",[t._v("缓存不如http高效，会增加数据开销；")]),t._v(" "),s("li",[t._v("SSL证书需要钱，功能越强大费用越高；")]),t._v(" "),s("li",[t._v("SSL证书需要绑定ip，不能在同一个ip上绑定多个域名，ipv4资源支持不了这种消耗")])]),t._v(" "),s("h6",{attrs:{id:"https的工作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https的工作流程"}},[t._v("#")]),t._v(" ==https的工作流程==")]),t._v(" "),s("ol",[s("li",[t._v("客户使用https的url访问web服务器，要求与web服务器建立SSL连接；")]),t._v(" "),s("li",[t._v("web服务器收到客户端请求后，会将网站的证书信息（证书中包含了公钥）传送一份给客户端；")]),t._v(" "),s("li",[t._v("客户端的浏览器与web服务器开始协商SSL连接的安全等级，也就是信息加密的等级；")]),t._v(" "),s("li",[t._v("客户端浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站")]),t._v(" "),s("li",[t._v("web服务器利用自己的私钥解密出会话密钥")]),t._v(" "),s("li",[t._v("web服务器利用会话密钥加密与客户端之间的通信")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"http与websocket"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http与websocket"}},[t._v("#")]),t._v(" http与websocket")]),t._v(" "),s("p",[t._v("WebSocket是HTML5规范提出的一种协议；目前除了完犊子的IE浏览器，其他浏览器都基本支持。他是一种协议，万变不离其宗，也是基于TCP协议的；和HTTP协议是并存的两种协议。\nWebSocket连接的过程是：")]),t._v(" "),s("ol",[s("li",[t._v("客户端发起http请求，经过3次握手后，建立起TCP连接；http请求里存放WebSocket支持的版本号等信息，如：Upgrade、Connection、WebSocket-Version等；")]),t._v(" "),s("li",[t._v("服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据；")]),t._v(" "),s("li",[t._v("客户端收到连接成功的消息后，开始借助于TCP传输信道进行全双工通信。")])]),t._v(" "),s("p",[s("strong",[t._v("==相同点==")]),t._v("\n都是一样基于TCP的，都是可靠性传输协议\n"),s("strong",[t._v("==区别==")])]),t._v(" "),s("ol",[s("li",[t._v("Websocket是一个持久化的协议，http不支持（长连接，循环连接的不算）；")]),t._v(" "),s("li",[t._v("Websocket支持双向通讯（可以让服务器主动向客户端推送消息，客户端也可以主动向服务器发送信息）；http只能由客户端发起，一个request对应一个response；")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"http协议的请求头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http协议的请求头"}},[t._v("#")]),t._v(" http协议的请求头")]),t._v(" "),s("p",[t._v("=="),s("strong",[t._v("Cache-control")]),t._v("== 缓存的开关（静态资源 自动缓存 认为干涉无效；From disk cache表示来自于缓存）\n取值：private（被私有缓存缓存）、public（可以被任何缓存所缓存）、max-age=xxx（有时间限制，一般单位为秒）、no-cache（不缓存过期的资源，缓存会向服务器进行有效处理确认之后处理资源）、no-store（不缓存）\n=="),s("strong",[t._v("资源标示对比")]),t._v("==\nEtag与if-None-Mach（最高级）：后端传递的if-None-Mach与Etag相比较，比不上了其他不用看 直接重新下载，不用缓存里的\nLast-Modified与If-Modified-Since：前者表示浏览器最后修改时间，在请求头里；后者表示最后接收时间，在响应头里；")])])}),[],!1,null,null,null);e.default=_.exports}}]);